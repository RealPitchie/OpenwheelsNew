@page "/"
@using Wheels.Domain.Models
@using Wheels.Application.Services 
@using Wheels.UI.Components
@using System.Diagnostics

@inject PostService PostService
@inject NavigationManager NavManager
<style>
    
</style> 
<div class="row"> 
    <div class="col-md-8" style="margin: 0 auto">
        <MudPaper Elevation="0" Class="header-block">  
            <div class="row" style="align-items: flex-end">
                <div class="col-md-9">
                    <MudAutocomplete MaxItems="50" T="string"
                                     Label="Поиск" FullWidth="false"
                                     Dense="true" SearchFunc="@Search1"
                                     @bind-Value="_searchString"
                                     ShowProgressIndicator="true">
                        <ProgressIndicatorTemplate>
                            <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Default"/>
                        </ProgressIndicatorTemplate>
                    </MudAutocomplete>
                </div>
                <div class="col-md-3">
                    <MudButton OnClick="SearchPost">
                        К посту
                    </MudButton>
                </div>
            </div>
        </MudPaper> 
        @if (_posts.Count > 0)
        {
            foreach (var post in _posts)
            {
                <PostPreview Post="post"/>
            }
        }

    </div>
    <div class="col-md-4" style="margin: 100px auto; justify-content: center; width: auto">
        <div style="position: sticky; top:15px; "> 
            <MudCarousel Class="mud-width-full" 
                         ItemsSource="@_topRatedPosts" 
                         Style="height:200px; max-width: 450px; min-width: 300px;position: sticky;  "
                         ShowArrows="true" 
                         ShowBullets="false" 
                         EnableSwipeGesture="true" 
                         AutoCycle="true">
                <ItemTemplate>
                    <div class="d-flex flex-column flex-column justify-center" 
                         style="background-image: url(@context.ImageFile[0]); background-size: contain; background-repeat: no-repeat;height:100%"> 
                        <span class="stroked-text" @onclick="() => ViewPost(context.Id)">
                            @context.Title
                        </span>
                    </div>
                </ItemTemplate>
            </MudCarousel>
        </div>
        
        
    </div>
   @if (_postsCount > 10)
   {
       <div style="text-align: center">
           <MudPagination
               Size="Size.Small"
               SelectedChanged="GetPosts"
               ShowFirstButton="true"
               ShowLastButton="true"
               Variant="Variant.Filled"
               Count="@(_postsCount / 10)"/>
       </div>
   }
</div>

@code{
    List<Post> _posts = new();
    List<Post> _topRatedPosts = new();
    Dictionary<string, string> _postsToSearch = new();
    int _postsCount;
    int _postsDeleted;
    string _searchString = "";
    protected override async Task OnInitializedAsync()
    {
        Stopwatch sw = new();
        sw.Start();
        _postsToSearch = PostService.GetPostsTitles();
        _postsCount = PostService.GetPostsCount();
        _posts = await PostService.GetPostsAsync(0);
        _topRatedPosts = await PostService.GetPostsByRatingAsync();
        Console.WriteLine("Прошло " + sw.ElapsedMilliseconds + " миллисекунд");
        sw.Stop();
    }

    async Task GetPosts(int pageNo)
    { 
        _posts = await PostService.GetPostsAsync(pageNo - 1);
        NavManager.NavigateTo("/");
    }
    private void ViewPost(string postId)
    {
        NavManager.NavigateTo("/view/" + postId);
    }
    private async Task<IEnumerable<string>> Search1(string value)
    { 
        if (string.IsNullOrEmpty(value))
            return _postsToSearch.Values;
        return _postsToSearch.Values.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    void SearchPost()
    {
        var postId = _postsToSearch
            .FirstOrDefault(x => 
                x.Value.ToLower().Contains(_searchString.ToLower())).Key;
        NavManager.NavigateTo("/view/" + postId);
    }

    async Task Cleanup()
    {
        _postsDeleted = await PostService.DbCleanup();
    }
}
