@using Wheels.Domain.Models
@using Wheels.Application.Services
@using System.Security.Claims
@namespace Wheels.UI.Components

@inject PostService PostService
@inject VoteService VoteService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<MudCard Class="hoverable-card" Elevation="0" Style="border-radius: 10px"> 
    <MudCardMedia @onclick="() => ViewPost(Post.Id)" Image="@Post.ImageFile[0]" Style="height: 400px; cursor: pointer"/>
    <a href="/" @onclick="() => ViewPost(Post.Id)"><h3 style="text-align: center; margin: 15px auto; font-weight: bold"> @Post.Title </h3></a>
    <h4 style="text-align: right; color: darkgray; font-size: x-small">@Post.Posted.ToString("D")</h4>
    @if (_userId == Post.Author)
    {
        <div class="col" style="text-align: end">
            <MudTooltip Text="Редактировать">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => EditPost(Post)" Size="Size.Small" aria-label="delete"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Удалить">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => DeletePost(Post)" Size="Size.Small" aria-label="delete"></MudIconButton>
            </MudTooltip>
        </div>
    }
    @if (_showFullText)
    {
        @foreach (var line in Post.Text)
        {
            <MudText Style="margin-bottom: 10px" Typo="Typo.body2">
                @line
            </MudText>
        }
    }
    else
    {
        foreach (var line in Post.Text.Take(3))
        {
            <MudText Style="margin-bottom: 10px" Typo="Typo.body2">
                @line
            </MudText>
        }
    }
    <div class="row" style=" margin-bottom: 15px"> 
        <div class="col">
            @if (Post.Text.Length > 3 && !_showFullText)
            {
                <MudButton Variant="Variant.Text" OnClick="() => ToggleView()" Style="font-size: small" Color="Color.Tertiary">Развернуть</MudButton>
            } 
        </div>
        
        <MudMessageBox @ref="Mbox" Title="Внимание" CancelText="Cancel">
            <MessageContent>
                Вы действительно хотите удалить этот пост?
            </MessageContent>
            <YesButton>
                <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Error">Удалить</MudButton>
            </YesButton>
            <CancelButton>
                <MudButton Size="Size.Small" Variant="Variant.Text">Отмена</MudButton>
            </CancelButton>
        </MudMessageBox>
        
        
        
    </div>
    <PostRating Post="Post" UpVote="() => VoteUp(Post, _userId)" DownVote="() => VoteDown(Post, _userId)"></PostRating>
</MudCard>

@code {
    [Parameter]
    public Post Post { get; set; } 
    MudMessageBox Mbox { get; set; }
    bool _showFullText;
    string? _userId = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is {IsAuthenticated: true })
        {
            _userId = user.FindFirst(c => c.Type == "Nickname")?.Value;
        }
    }

    private void ViewPost(string postId)
    {
        NavManager.NavigateTo("/view/" + postId);
    }

    private void EditPost(Post post)
    {
        NavManager.NavigateTo("/edit/" + Post.Id);
    }

    private async Task  DeletePost(Post post)
    {
        var result = await Mbox.Show();
        if (result == true)
        {
            await PostService.DeletePost(post);
        } 
    }

    private void ToggleView()
    {
        _showFullText = !_showFullText;
    }

    async Task VoteUp(Post post, string? userId)
    {
        if (VoteService.WasUpvotedByUser(post, userId))
        {
            Snackbar.Add($"Пост уже оценен", Severity.Error);
            return;
        }
        await VoteService.Vote(post, userId, "up");
    }

    async Task VoteDown(Post post, string? userId)
    {
        if (VoteService.WasDownvotedByUser(post, userId))
        {
            Snackbar.Add($"Пост уже оценен", Severity.Error);
            return;
        }
        await VoteService.Vote(post, userId, "down");
    }

}