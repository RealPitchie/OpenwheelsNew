<a @attributes="this.Attributes"
   @onclick="AnchorOnClickAsync"
   @onclick:preventDefault="@preventDefault">
        @ChildContent
</a>

@code {

    public AnchorLink()
    {
        Attributes = new Dictionary<string, object>();
    }

    private string targetId = null;
    private bool preventDefault = false;
 
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> Attributes { get; set; }
 
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Inject]
    protected IJSRuntime JsInterop { get; set; }


    protected override void OnParametersSet()
    {
        string href = null;
        string css_class = null;
        if (Attributes.ContainsKey("href"))
        {
            // If the href attribute has been specified, we examine the value of it. If if starts with '#'
            // we assume the rest of the value contains the ID of the element the link points to.
            href = $"{Attributes["href"]}";
            if (href.StartsWith("#"))
            {
                // If the href contains an anchor link we don't want the default click action to occur, but
                // rather take care of the click in our own method.
                targetId = href.Substring(1);
                preventDefault = true;
            }else if (href.Contains("#"))
            {
                targetId = href.Split('#')[1];
                preventDefault = true;
            }
        }
        base.OnParametersSet();
    }

    private async Task AnchorOnClickAsync()
    {
        if (!string.IsNullOrEmpty(targetId))
        {
            // If the target ID has been specified, we know this is an anchor link that we need to scroll
            // to, so we call the JavaScript method to take care of this for us.
            await JsInterop.InvokeVoidAsync("anchorLink.scrollIntoView", targetId);
        }
    }

}

